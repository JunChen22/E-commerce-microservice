apiVersion: v1
kind: ConfigMap
metadata:
  name: cms
  labels:
    app: cms
data:
  application.yml: |
    # message queue related and distributed tracing/Zipkin/Sleuth needed to collect logs
    spring:
      rabbitmq:
        host: localhost
        port: 5672
        virtual-host: /
        username: guest
        password: guest
        publisher-confirms: true
    
    spring.cloud.stream.defaultBinder: rabbit
    spring.zipkin.sender.type: rabbit
    spring.sleuth.sampler.probability: 1.0
    
    # WARNING: Exposing all management endpoints over http should only be used during development, must be locked down in production!
    management.endpoint.health.show-details: "ALWAYS"
    management.endpoints.web.exposure.include: "*"
    
    #    TRACE: The lowest level of logging that provides the most detailed information about what is happening in the application.
    #    DEBUG: A level higher than TRACE that provides information about application flow and internal state.
    #    INFO: A level higher than DEBUG that provides information about what the application is doing and its status.
    #    WARN: A level higher than INFO that indicates potentially harmful situations.
    #    ERROR: The highest level of logging that indicates errors that may cause the application to malfunction or fail.
    
    logging:
      level:
        #root: ERROR
        root: INFO
        org.springframework.security: DEBUG
        org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE
        com.itsthatjun.ecommerce: DEBUG
    
    ---
    spring.config.activate.on-profile: docker
    
    spring.rabbitmq.host: rabbitmq
    
    eureka.client.enabled: false   # Disabled for kubernetes, use eureka profile to deploy on docker
  cms.yml: |+
    server:
      port: 8081
    
    spring:
      application:
        name: cms
      datasource:
        url: jdbc:postgresql://localhost:5433/contentdb
        username: postgres
        password: password
        driverClassName: org.postgresql.Driver
        #initialization-mode: always
    
    spring.cloud:
      function:   # can't have space between, tells spring which to use
        definition: articleMessageProcessor
      stream:
        default:
          contentType: application/json
        bindings:
          articleMessageProcessor-in-0:
            destination: adminArticle
            group: adminArticleGroup
    
    # tells spring mybatis mapper's xml(sql) located
    mybatis:
      mapper-locations:
        - classpath:mapper/*.xml
        - classpath:dao/*.xml
    
    ---
    
    spring.config.activate.on-profile: docker
    
    server.port: 80
    
    spring:
      datasource:
        url: jdbc:postgresql://cms-db:5432/contentdb
    
    ---
    spring.config.activate.on-profile: kafka
    
    spring.cloud.stream.bindings.articleMessageProcessor-in-0.consumer:
      partitioned: true
