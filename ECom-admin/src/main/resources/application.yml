server:
  port: 8082

#    TRACE: The lowest level of logging that provides the most detailed information about what is happening in the application.
#    DEBUG: A level higher than TRACE that provides information about application flow and internal state.
#    INFO: A level higher than DEBUG that provides information about what the application is doing and its status.
#    WARN: A level higher than INFO that indicates potentially harmful situations.
#    ERROR: The highest level of logging that indicates errors that may cause the application to malfunction or fail.
logging:
  level:
    #root: ERROR
    root: INFO
    org:
      springframework:
        security: DEBUG
    com:
      itsthatjun:
        ecommerce: DEBUG

spring:
  datasource:
    url: jdbc:postgresql://localhost/springecommerece
    driverClassName: org.postgresql.Driver
    #initialization-mode: always
  data:
    mongodb:
      host: localhost
      port: 27017
      database: springecommerece
  redis:
    host: localhost
    database: 0
    port: 6379
    password:
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
    timeout: 3000ms
  rabbitmq:
    host: localhost
    port: 5672
    virtual-host: /
    username: guest
    password: guest
    publisher-confirms: true

spring.cloud.stream.defaultBinder: rabbit

# outputs
# CMS does not need message queue, they only have read operations.
spring.cloud.stream:
  bindings:             # only OMS,PMS,UMS have write operations. Read operations don't need to message queue, non-blocking synchronous.
    user-out-0: # UMS
      destination: adminUser
      producer:
        required-groups: adminUserGroup
    userEmail-out-0:
      destination: adminUserEmail
      producer:
        required-groups: adminUserEmailGroup

    order-out-0:  # OMS
      destination: adminOrder
      producer:
        required-groups: adminOrderGroup
    orderMessage-out-0:             # send out message regarding a certain product like recall or invalid item.
      destination: adminOrderItem
      producer:
        required-groups: adminOrderItemGroup
    return-out-0:
      destination: adminReturn
      producer:
        required-groups: adminReturnGroup

    review-out-0: # PMS
      destination: adminReview
      producer:
        required-groups: adminReviewGroup
    product-out-0:
      destination: adminProduct
      producer:
        required-groups: adminProductGroup
    brand-out-0:
      destination: adminBrand
      producer:
        required-groups: adminBrandGroup

    coupon-out-0:   # SMS
      destination: adminCoupon
      producer:
        required-groups: adminCouponGroup
    sales-out-0:
      destination: adminSales
      producer:
        required-groups: adminSalesGroup

    article-out-0:   # CMS
      destination: adminArticle
      producer:
        required-groups: adminArticleGroup

# tells spring mybatis mapper's xml(sql) located
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath:dao/*.xml

redis:
  key:
    prefix:
      authCode: "authCode:"
    expire:
      authCode: 120

jwt:
  HEADER_STRING: Authorization
  tokenPrefix: Bearer
  secretKey: JunChen522
  expirationTimeMinute: 150

---

spring.config.activate.on-profile: docker

spring:
  datasource.url: jdbc:postgresql://postgres/springecommerece
  data:
    mongodb:
      host: mongodb
  redis:
    host: redis
  rabbitmq:
    host: rabbitmq

---

spring.config.activate.on-profile: kafka

spring.cloud.stream.kafka.binder.brokers: kafka

management.health.rabbit.enabled: false
spring.cloud.stream.defaultBinder: kafka
spring.kafka.bootstrap-servers: kafka:9092
spring.cloud.stream.kafka.binder.replication-factor: 1
spring.zipkin.sender.type: kafka

spring.cloud.stream.bindings.user-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.order-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.return-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.review-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.product-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.brand-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.coupon-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.sales-out-0.producer:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.article-out-0.producer:
  partition-key-expression: headers['event-type']

