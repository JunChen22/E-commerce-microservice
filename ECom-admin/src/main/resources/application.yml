server:
  port: 8082

#    TRACE: The lowest level of logging that provides the most detailed information about what is happening in the application.
#    DEBUG: A level higher than TRACE that provides information about application flow and internal state.
#    INFO: A level higher than DEBUG that provides information about what the application is doing and its status.
#    WARN: A level higher than INFO that indicates potentially harmful situations.
#    ERROR: The highest level of logging that indicates errors that may cause the application to malfunction or fail.
logging:
  level:
    #root: ERROR
    org:
      springframework:
        security: DEBUG
    com:
      itsthatjun:
        ecommerce: DEBUG

spring:
  datasource:
    url: jdbc:postgresql://localhost/springecommerece
    username: postgres
    password: password
    driverClassName: org.postgresql.Driver
    #initialization-mode: always
  data:
    mongodb:
      host: localhost
      port: 27017
      database: springecommerece
  redis:
    host: localhost
    database: 0
    port: 6379
    password:
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
    timeout: 3000ms

# outputs
# CMS does not need message queue, they only have read operations.
spring.cloud.stream:
  bindings:             # only OMS,PMS,UMS have write operations. Read operations don't need to message queue, non-blocking synchronous.
    order-out-0:  # OMS
      destination: order
      producer:
        required-groups: auditGroup
    cart-out-0:
      destination: cart
      producer:
        required-groups: auditGroup
    return-out-0:
      destination: return
      producer:
        required-groups: auditGroup
    review-out-0: # PMS
      destination: review
      producer:
        required-groups: auditGroup
    product-out-0:
      destination: product
      producer:
        required-groups: productGroup
    user-out-0:    # UMS
      destination: user
      producer:
        required-groups: auditGroup
    coupon-out-0:   # SMS
      destination: coupon
      producer:
        required-groups: couponGroup
    salesStock-out-0:
      destination: salesStock
      producer:
        required-groups: salesGroup




# tells spring mybatis mapper's xml(sql) located
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath:dao/*.xml

redis:
  key:
    prefix:
      authCode: "authCode:"
    expire:
      authCode: 120

jwt:
  HEADER_STRING: Authorization
  tokenPrefix: Bearer
  secretKey: JunChen522
  expirationTimeMinute: 15

app:
  CMS-service:
    host: cms
    port: 8080
  OMS-service:
    host: oms
    port: 8080
  PMS-service:
    host: pms
    port: 8080
  SMS-service:
    host: sms
    port: 8080
  UMS-service:
    host: ums
    port: 8080

---

spring.config.activate.on-profile: docker

spring:
  datasource.url: jdbc:postgresql://postgres/springecommerece
  data:
    mongodb:
      host: mongodb
      port: 27017
      database: springecommerece
  redis:
    host: redis
    port: 6379
