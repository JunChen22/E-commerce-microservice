version: '3'

services:
  postgres:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: springecommerece
    ports:
      - 5432:5432
    volumes:
      - db-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5

  cms-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: contentdb
    ports:
      - 5433:5432
    volumes:
      - cms-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  oms-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: orderdb
    ports:
      - 5434:5432
    volumes:
      - oms-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  pms-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: productdb
    ports:
      - 5435:5432
    volumes:
      - pms-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  sms-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: salesdb
    ports:
      - 5436:5432
    volumes:
      - sms-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  ums-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: userdb
    ports:
      - 5437:5432
    volumes:
      - ums-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      retries: 5

  auth-db:
    image: postgres:9.6.10
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: authdb
    ports:
      - 5438:5432
    volumes:
      - auth-data:/var/lib/postgresql/data
      - ./document/data.sql:/docker-entrypoint-initdb.d/data.sql
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5

  mongodb:
    image: mongo:5.0.0
    restart: always
    ports:
      - 27017:27017
    command: mongod
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 5s
      timeout: 2s
      retries: 60

  redis:
    image: redis:7.0.14
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 5

  rabbitmq:
    image: rabbitmq:3.8.11-management
    restart: always
    ports:
      - 5672:5672
      - 15672:15672
    volumes:
      - rabbit-data:/var/lib/rabbitmq
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 10

  elasticsearch:
    image: elasticsearch:7.12.0
    environment:
      - "cluster.name=elasticsearch"
      - "discovery.type=single-node"
      - "ES_JAVA_OPTS=-Xms512m -Xmx1024m"
    #volumes:
    #  - /home/jun/Desktop/data/ELK/es:/usr/share/elasticsearch/data # data
    ports:
      - 9200:9200
      - 9300:9300

  logstash:
    image: logstash:7.12.0
    ports:
      - 5044:5044
      - 9600:9600
    depends_on:
      - elasticsearch

  kibana:
    image: kibana:7.12.0
    environment:
      - "ELASTICSEARCH_HOSTS=http://elasticsearch:9200"
    ports:
      - 5601:5601
    depends_on:
      - elasticsearch

  search:
    build: ECom-search
    image: e-com/search
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/search.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      - mongodb
      - kibana
      - logstash
      - elasticsearch
      - pms-db

  app:
    build: ECom-app/App
    image: e-com/app
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/app.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  cms:
    build: ECom-app/CMS
    image: e-com/cms
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/cms.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      cms-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  oms:
    build: ECom-app/OMS
    image: e-com/oms
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/oms.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
      - PAYPAL_MODE=${paypal_mode}
      - PAYPAL_CLIENT_ID=${paypal_client_id}
      - PAYPAL_CLIENT_SECRET=${paypal_client_secret}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      oms-db:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  pms:
    build: ECom-app/PMS
    image: e-com/pms
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/pms.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      pms-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  sms:
    build: ECom-app/SMS
    image: e-com/sms
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/sms.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      sms-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy

  ums:
    build: ECom-app/UMS
    image: e-com/ums
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/ums.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    depends_on:
      ums-db:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
      redis:
        condition: service_healthy

  admin:
    build: ECom-admin
    ports:
      - 8082:8082
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    depends_on:
      postgres:
        condition: service_healthy

  gateway:
    build: gateway
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/gateway.yml
    volumes:
      - $PWD/config-repo:/config-repo
    ports:
      - "8080:8080"

  eureka:
    build: eureka-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/eureka-server.yml
    volumes:
      - $PWD/config-repo:/config-repo

  auth-server:
    build: auth-server
    image: e-com/auth-server
    mem_limit: 512m
    environment:
      - SPRING_PROFILES_ACTIVE=docker,eureka
      - SPRING_CONFIG_LOCATION=file:/config-repo/application.yml,file:/config-repo/auth-server.yml
      - SPRING_DATASOURCE_USERNAME=${POSTGRES_USR}
      - SPRING_DATASOURCE_PASSWORD=${POSTGRES_PWD}
    volumes:
      - $PWD/config-repo:/config-repo
    healthcheck:
      test: ["CMD", "curl", "-fs", "http://auth-server/actuator/health"]
      interval: 5s
      timeout: 2s
      retries: 60
    depends_on:
      auth-db:
        condition: service_healthy

  zipkin:
    image: openzipkin/zipkin:2.23.2
    mem_limit: 1024m
    environment:
      - STORAGE_TYPE=mem
      - RABBIT_ADDRESSES=rabbitmq
    ports:
      - "9411:9411"
    depends_on:
      rabbitmq:
        condition: service_healthy

volumes:
  db-data:
  cms-data:
  oms-data:
  pms-data:
  sms-data:
  ums-data:
  auth-data:
  rabbit-data: