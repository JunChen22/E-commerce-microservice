server:
  port: 8080

app:
  CMS-service:
    host: localhost
    port: 8081
  OMS-service:
    host: localhost
    port: 8082
  PMS-service:
    host: localhost
    port: 8083
  SMS-service:
    host: localhost
    port: 8084
  UMS-service:
    host: localhost
    port: 8085

spring:
  datasource:
    url: jdbc:postgresql://localhost/springecommerece
    username: postgres
    password: password
    driverClassName: org.postgresql.Driver
    #initialization-mode: always
  data:
    mongodb:
      host: localhost
      port: 27017
      database: springecommerece
  redis:
    host: localhost
    database: 0
    port: 6379
    password:
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
    timeout: 3000ms
  rabbitmq:
    host: localhost
    port: 5672
    virtual-host: /
    username: guest
    password: guest
    publisher-confirms: true

# tells spring mybatis mapper's xml(sql) located
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath:dao/*.xml

redis:
  key:
    prefix:
      authCode: "authCode:"
    expire:
      authCode: 120

jwt:
  HEADER_STRING: Authorization
  tokenPrefix: Bearer
  secretKey: JunChen522
  expirationTimeMinute: 150

logging:
  level:
    #root: ERROR
    org:
      springframework:
        security: DEBUG
    com:
      itsthatjun:
        ecommerce: DEBUG

---

spring.config.activate.on-profile: docker

spring:
  datasource.url: jdbc:postgresql://postgres/springecommerece
  data:
    mongodb:
      host: mongodb
      port: 27017
      database: springecommerece
  redis:
    host: redis
    port: 6379
  rabbitmq:
    host: rabbitmq
    port: 5672
    virtual-host: /
    addresses: rabbitmq:5672

app:
  CMS-service:
    host: cms
    port: 8080
  OMS-service:
    host: oms
    port: 8080
  PMS-service:
    host: pms
    port: 8080
  SMS-service:
    host: sms
    port: 8080
  UMS-service:
    host: ums
    port: 8080
