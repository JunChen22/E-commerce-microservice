server:
  port: 8083

spring:
  application:
    name: pms
  datasource:
    url: jdbc:postgresql://localhost:5435/productdb
    username: postgres
    password: password
    driverClassName: org.postgresql.Driver
    #initialization-mode: always
  data:
    mongodb:
      host: localhost
      port: 27017
      database: springecommerece
  redis:
    host: localhost
    database: 0
    port: 6379
    password:
    jedis:
      pool:
        max-active: 8
        max-wait: -1ms
        max-idle: 8
        min-idle: 0
    timeout: 3000ms
  rabbitmq:
    host: localhost
    port: 5672
    virtual-host: /
    username: guest
    password: guest
    publisher-confirms: true

spring.cloud:
  function:
    # can't have space between, tells spring which to use
    definition: reviewMessageProcessor;adminBrandMessageProcessor;adminProductMessageProcessor;adminReviewMessageProcessor;omsProductMessageProcessor;smsProductMessageProcessor
  stream:
    default:
      contentType: application/json
    bindings:
      reviewMessageProcessor-in-0:      # incoming message from App/customer
        destination: review
        group: reviewGroup
      adminBrandMessageProcessor-in-0:  # admin CRUD brand, product and review
        destination: adminBrand
        group: adminBrandGroup
      adminProductMessageProcessor-in-0:
        destination: adminProduct
        group: adminProductGroup
      adminReviewMessageProcessor-in-0:
        destination: adminReview
        group: adminReviewGroup

      omsProductMessageProcessor-in-0:      # update from OMS(purchase, return) and SMS for new sale
        destination: orderProductStockUpdate
        group: orderProductStockUpdateGroup
      smsProductMessageProcessor-in-0:
        destination: saleStockPMSUpdate
        group: saleStockPMSUpdateGroup

      omsProductUpdate-out-0:               # sending update to SMS and OMS for product changes
        destination:  productStockOMSUpdate
        group: productStockOMSUpdateGroup
      smsProductUpdate-out-0:
        destination: productStockSMSUpdate
        group: productStockSMSUpdateGroup

# tells spring mybatis mapper's xml(sql) located
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath:dao/*.xml

redis:
  key:
    prefix:
      authCode: "authCode:"
    expire:
      authCode: 120


app.eureka-server: localhost

eureka:
  client:
    serviceUrl:
      defaultZone: http://${app.eureka-server}:8761/eureka/
    initialInstanceInfoReplicationIntervalSeconds: 5
    registryFetchIntervalSeconds: 5
  instance:
    leaseRenewalIntervalInSeconds: 5
    leaseExpirationDurationInSeconds: 5










logging:
  level:
    #root: ERROR
    org:
      springframework:
        security: DEBUG
    com:
      itsthatjun:
        ecommerce: DEBUG

---

spring.config.activate.on-profile: docker

server.port: 8080

spring:
  datasource.url: jdbc:postgresql://PMS-db:5432/productdb
  data:
    mongodb:
      host: mongodb
      port: 27017
      database: springecommerece
  redis:
    host: redis
    port: 6379
  rabbitmq:
    host: rabbitmq
    port: 5672
    virtual-host: /
    addresses: rabbitmq:5672

app:
  eureka-server: eureka