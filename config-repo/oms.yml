server:
  port: 8082

spring:
  application:
    name: oms
  datasource:
    url: jdbc:postgresql://localhost:5434/orderdb
    username: postgres
    password: password
    driverClassName: org.postgresql.Driver
    #initialization-mode: always
  redis:
    host: localhost
    port: 6379

spring.cloud:
  function: # can't have space between, tells spring which to use, using a pipe character allow multi-line.
    definition: cartMessageProcessor;returnMessageProcessor;orderMessageProcessor;orderCompleteMessageProcessor;adminOrderMessageProcessor;adminReturnMessageProcessor;updateFromPmsMessageProcessor;updateFromSmsMessageProcessor;
  stream:
    default:
      contentType: application/json
    bindings:
      cartMessageProcessor-in-0:        # incoming message from app/customer
        destination: cart
        group: cartGroup
      returnMessageProcessor-in-0:
        destination: return
        group: returnGroup
      orderMessageProcessor-in-0:
        destination: order
        group: orderGroup
      orderCompleteMessageProcessor-in-0:
        destination: orderComplete
        group: orderGroup
      adminOrderMessageProcessor-in-0: # admin CRUD order or return
        destination: adminOrder
        group: adminOrderGroup
      adminReturnMessageProcessor-in-0:
        destination: adminReturn
        group: adminReturnGroup

      updateFromPmsMessageProcessor-in-0:     #  update from SMS and PMS
        destination: productStockOMSUpdate
        group: productStockOMSUpdateGroup
      updateFromSmsMessageProcessor-in-0:
        destination: saleStockOMSUpdate
        group: saleStockOMSUpdateGroup

      coupon-out-0:           # sending to other queue to update their stock after sales or return
        destination: orderCouponUpdate
        producer:
          required-groups: orderCouponUpdateGroup
      salesStock-out-0:
        destination: orderSaleStockUpdate
        producer:
          required-groups: orderSaleStockUpdateGroup
      product-out-0:
        destination: orderProductStockUpdate
        producer:
          required-groups: orderProductStockUpdateGroup

      orderCancelTTL-out-0:               # queue with TTL, act as scheduled task or delayed task
        destination: orderCancelQueue
        producer:
          required-groups: orderGroup


# tells spring mybatis mapper's xml(sql) located
mybatis:
  mapper-locations:
    - classpath:mapper/*.xml
    - classpath:dao/*.xml

# if you running it local/ide
paypal:
  mode: YOUR_PAYPAL_MODE
  client:
    id: YOUR_PAYPAL_CLIENT_ID
    secret: YOUR_PAYPAL_CLIENT_SECRET

redis:
  key:
    orderId: oms
  database: ECom
  expire:
    common: 7200    # 120 minutes, measured in seconds

---

spring.config.activate.on-profile: docker

server.port: 8080

spring:
  datasource:
    url: jdbc:postgresql://OMS-db:5432/orderdb
  redis:
    host: redis

paypal:
  mode: ${PAYPAL_MODE}
  client:
    id: ${PAYPAL_CLIENT_ID}
    secret: ${PAYPAL_CLIENT_SECRET}


---
spring.config.activate.on-profile: kafka

spring.cloud.stream.bindings.cartMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.returnMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.orderMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.orderCompleteMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.adminOrderMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.adminReturnMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.updateFromPmsMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.updateFromSmsMessageProcessor-in-0:
  partitioned: true

spring.cloud.stream.bindings.coupon-out-0:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.salesStock-out-0:
  partition-key-expression: headers['event-type']

spring.cloud.stream.bindings.product-out-0:
  partition-key-expression: headers['event-type']
